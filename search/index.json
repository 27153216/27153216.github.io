[{"content":"介紹 這裡收集了一些我曾接觸過的熱門 AI 以及產出的作品\nVITS 語音模型 最初 VITS 是文本轉語音的模型，\n而之後就出現很多以 VITS 為基礎衍伸的模型。\nVITS 的原始論文與原始碼：\nhttps://arxiv.org/abs/2106.06103\nhttps://github.com/jaywalnut310/vits\n而我最近在玩的，也就是非常熱門的 RVC。\n全稱 Retrieval-based-Voice-Conversion\nhttps://github.com/RVC-Project/Retrieval-based-Voice-Conversion-WebUI\n他是一個基於 VITS 的語音轉換器，\n簡單來說就是變聲器。\n除了一些熱門的預訓練模型外，\n我也嘗試以自己和朋友的聲音訓練，\n並產生了一些驚人的結果。\n真的是 AI 用你的聲音，唱得比你好聽😂\n這邊放上我的其中一個。\n要把特定的聲音套用到歌曲上，\n首先要先進行人聲分離。\n這邊我使用 UVR5 進行，\n全名 Ultimate Vocal Remover。\nhttps://github.com/Anjok07/ultimatevocalremovergui\n接著把人聲部分透過 RVC 轉換過後，\n再與音樂部分合成回去即可。\nStable Diffusion 論文與原始碼：\nhttps://openaccess.thecvf.com/content/CVPR2022/html/Rombach_High-Resolution_Image_Synthesis_With_Latent_Diffusion_Models_CVPR_2022_paper.html https://github.com/CompVis/stable-diffusion\n我想這個應該大家都很熟悉，\n就是造成了很大爭議的 AI 繪圖。\n因為訓練用的資料是否有侵權的疑慮，\n以及大量生產的 AI 圖可能使初階繪師受到衝擊。\n我使用的生成器是這個\nhttps://github.com/AUTOMATIC1111/stable-diffusion-webui\n這邊分享幾張當初我生成的圖。\n其實都看得出在細節上有不少破綻，\n不過到後來一直有更多新的技術在修正這些破綻，\n比如可以調整骨架、手指、臉部的修正等等。\n但最令我驚訝的應該是 LoRA 的出現。\n全名 LoRA: Low-Rank Adaptation of Large Language Models\nhttps://arxiv.org/abs/2106.09685\n原先是用在微調大型語言模型上，\n因為這些大型模型的數據量太大了，\n如果想要特化某些類型的輸出，\n整個重新訓練的成本相當高。\n而這項技術應用在 Stable Diffusion 上後，\n讓特定風格、角色的生成出現了質的飛越。\nhttps://github.com/cloneofsimo/lora\n只要選好基底的 Checkpoint，\n加上特定風格或角色的 LoRA，\n幾乎能生成出任何種類的人物圖像。\n改變的關鍵就是特化訓練所需的樣本數很少，\n最少僅需要15張左右的特定樣本，\n以及不到半小時的訓練時間，\n就可以得到很好的效果，\n因此人人都能訓練一個自己喜歡的角色或風格。\n從隨機的真人到特定人物（右圖為新垣結衣）\n來源： https://civitai.com/models/14171/cutegirlmix4\nhttps://civitai.com/models/8416/gakki-or-aragaki-yui-or\n特定動畫角色或畫風\n來源： https://civitai.com/models/5373/makima-chainsaw-man-lora\nhttps://civitai.com/models/4219/one-piece-wano-saga-style-lora\n甚至是布偶、人偶\u0026hellip;\n來源： https://civitai.com/models/26477/doll-style-photography-art-realisticjoints-dollsdbjdmdddddds\nhttps://civitai.com/models/22361/fufu-doll-realisticanime\n都能夠透過 AI 生成，\n不禁令人感嘆現今 AI 發展的速度。\nFirst Order Motion Model for Image Animation 網站、論文、原始碼：\nhttps://aliaksandrsiarohin.github.io/first-order-model-website/\nhttps://proceedings.neurips.cc/paper_files/paper/2019/hash/31c0b36aef265d9221af80872ceb62f9-Abstract.html\nhttps://github.com/AliaksandrSiarohin/first-order-model\n這是一個讓「靜態圖片」，按照一段「動態影像」驅動的 AI。\n簡單來說，就是你給他一張不會動的照片，\n然後再給他一段會動的影片，\nboom! 圖片照著影片動起來了。\n我也試著拿我很久以前的照片，\n套上當時流行的打咩打捏。\n生成結果\n","date":"2023-01-01T00:00:00Z","image":"https://27153216.github.io/p/%E7%8E%A9%E7%8E%A9%E7%86%B1%E9%96%80-ai/yuxiang_hue9b2f6d0f34aed3dc589bbe3c9ae5a03_248397_120x120_fill_box_smart1_3.png","permalink":"https://27153216.github.io/p/%E7%8E%A9%E7%8E%A9%E7%86%B1%E9%96%80-ai/","title":"玩玩熱門 AI"},{"content":"https://github.com/27153216/DehazeNet_TF\n作品介紹 DehazeNet 是 2016 年的機器學習去霧的論文：\nDehazeNet An End-to-End System for Single Image\nhttps://ieeexplore.ieee.org/abstract/document/7539399\n而這個作品是它的 TensorFlow 實作版。\n本論文原本使用的是相當舊的 Caffe 框架，\n作為練習，我自己看著 TF 的文檔實作論文中的網路架構。\n可以使用自己的資料的訓練及測試，\n由於訓練用的資料庫較新，去霧效果會比原本的好一點。\n（因為是練習的關係，原始碼 training 的部分被我註解掉了，後來也就沒有再維護。）\n以下是我自己訓練後產生的結果。\n效果展示 ","date":"2021-01-01T00:00:00Z","image":"https://27153216.github.io/p/dehazenet-tensorflow/home_hu67f8430355ca06b07700fdafc5943ed4_1107042_120x120_fill_box_smart1_3.png","permalink":"https://27153216.github.io/p/dehazenet-tensorflow/","title":"DehazeNet TensorFlow"},{"content":"https://github.com/27153216/AI-Project\n作品介紹 這個作品是我人工智慧課程的期末專題，\n使用 Python 與 Pygame 套件開發的一個打殭屍遊戲。\n殭屍會以固定路線移動，\n除了玩家自己打殭屍的版本以外，\n還有各種演算法與機器學習的自動打殭屍版本。\n包含 GA 演算法、PSO 演算法、TensorFlow 機器學習，\n其中 PSO 又分成三種版本，TensorFlow 兩個版本。\n基本概念都是射 10 槍為 1 輪，射 10 輪為 1 次迭代，\n在不斷的迭代中，電腦會越射越準，\n越來越接近殭屍的移動路線。\nPSO 會有三個版本是因為，\n一開始我將 1 輪射擊視為 1 個 Particle，每 10 輪 1 個迭代，\n但這樣很容易卡在局部最佳解，最高分一直上不去。\n因此後來做了加入 Mutation 的版本，\n讓它有一點隨機性，跳脫出局部最佳解的狀況。\n而再後來我還是覺得 1 輪射擊視為 1 個 Particle 很奇怪，又做了霰彈槍版本的，\n一槍就是 10 個子彈，也就是 10 個 Particle，10 槍就是一個迭代，看起來合理許多。\nTensorFlow 的部分，一個是將 x, y 軸的 loss 分開計算，另一個是一起計算的版本。\n功能介紹 遊戲主畫面，\n左上方會顯示快捷鍵，左下方為剩餘彈藥，下方顯示當次分數與最高分。\n命中殭屍會在背景留下血漬，未命中則是彈孔。\n演算法版本在右邊會看到一個圖表，\n縱軸顯示的是得分，橫軸顯示的是迭代次數。\n由於電腦訓練需要時間，可以按下 a 加速進行，按 d 恢復。\n按 z 可以將右方圖表的更新暫停，\n因為在加速訓練的時候，不斷的刷新圖表會導致運行效率下降。\nTensorFlow 的部分，\n一個是將 x, y 軸的 loss 分開計算，\n另一個是只讓電腦知道該槍與殭屍差了多少距離，\n只有一個 loss 的版本。\n影片介紹 0:00 打殭屍遊戲\n0:26 Genetic Algorithm\n2:03 Particle Swarm Optimization\n3:00 Particle Swarm Optimization + Mutation\n4:50 Particle Swarm Optimization shotgun ver.\n6:08 TensorFlow x,y loss\n7:40 TensorFlow 1 loss\n","date":"2020-06-01T00:00:00Z","image":"https://27153216.github.io/p/shoot-the-zombie/home_hue11fe5c24e50f9cd86ff2a335cc41171_621494_120x120_fill_box_smart1_3.png","permalink":"https://27153216.github.io/p/shoot-the-zombie/","title":"Shoot the Zombie"},{"content":"https://github.com/27153216/Undergraduate-Project\n專題介紹 這個專題是一款使用 Python 開發的小遊戲，\n玩家可以進行單人打磚塊或是雙人桌球對戰。\n透過 YOLOv3-tiny 物件偵測功能，使用 CK+ 表情資料集進行訓練，\n使遊戲可以辨識玩家的表情，並將其分為中性、悲傷、開心、生氣、驚訝等五種不同的表情，\n以控制滑板的不動、向左、向右、左發球、右發球等操作。\n這樣的遊戲方式可以幫助玩家訓練面部肌肉，\n達到預防臉部老化的效果。\n本專題在專題成果競賽中榮獲第一名，\n並寫成論文發表至 ICIM 2021 榮獲佳作，\n還受邀參加 KOSMOS 產學成果展。\n在這個專題中，\n我主要負責程式開發的大部分工作，\n包括遊戲核心、表情控制滑板、效能優化等方面。\n功能介紹 遊戲透過 YOLO 辨識玩家的五種表情，\n分別是中性、悲傷、開心、生氣、驚訝。\n而玩家則要透過精準的表情控制，來移動滑板。\n進入遊戲後，可以看到以上五個選項。\n首先選擇遊戲說明選項。\n在這個頁面可以看到遊戲的操作說明。\n接著我們選擇單人闖關。\n單人闖關，是一人遊玩的打磚塊遊戲。\n總共分為三個關卡，越高的關卡，滑板和球的移動速度就會越快，考驗玩家的表情控制。\n接著介紹雙人對戰。\n雙人對戰是由兩人參與的桌球遊戲。\n此時攝影機畫面會一分為二，\n左方玩家控制上方滑板，右方玩家控制下方滑板。\n先奪得 11 分的人獲得勝利，考驗雙方對於表情的掌握度。\n影片介紹 0:00 專題介紹\n0:18 遊戲說明\n0:24 練習模式\n0:56 單人關卡\n2:42 雙人對戰\n專題發表 榮獲第一名\n受邀參加 KOSMOS 產學成果展。\n發表至第 32 屆國際資訊管理學術研討會，榮獲佳作。\n","date":"2019-12-01T00:00:00Z","image":"https://27153216.github.io/p/%E8%87%89%E9%83%A8%E8%A1%A8%E6%83%85%E8%BE%A8%E8%AD%98%E5%8F%8A%E5%85%B6%E5%9C%A8%E8%80%81%E6%85%8B%E9%A0%90%E9%98%B2%E4%B8%8A%E7%9A%84%E6%87%89%E7%94%A8/%E9%A6%96%E9%A0%811_huf75e8b2c3e6f76b2adb160073fae3236_247075_120x120_fill_box_smart1_3.png","permalink":"https://27153216.github.io/p/%E8%87%89%E9%83%A8%E8%A1%A8%E6%83%85%E8%BE%A8%E8%AD%98%E5%8F%8A%E5%85%B6%E5%9C%A8%E8%80%81%E6%85%8B%E9%A0%90%E9%98%B2%E4%B8%8A%E7%9A%84%E6%87%89%E7%94%A8/","title":"臉部表情辨識及其在老態預防上的應用"},{"content":"https://github.com/27153216/EC-Project\n作品介紹 這是我在電子商務的課程中做的課堂作品，\n由 ASP.NET 結合 SQL Server 開發的電子商務平台。\n本專題為小組開發，\n網頁與程式部分由我開發，\n小組成員負責商品構想、行銷計畫、價格制定等等其他部分。\n此購物網站原先是連結到學校的資料庫，\n但由於課程結束，資料庫已經關閉，\n因此這個版本改成本地資料庫。\n功能介紹 首頁由五張輪播圖構成。\n品牌故事介紹。\n購買商品頁面。\n（商品的資料為方便演示，並非當時的真實資料）\n購買按鈕已經沒有功能，因為學校伺服器已經關閉。\n帳號註冊、登入。\n登入後可以在右上方看見使用者名稱。\n此時由於我登入的是我的管理帳號，所以可以看到管理的按鈕。\n因為在不斷修改資料的過程中，\n每次修改都要連入學校的資料庫，\n打一長串資料庫指令，非常繁瑣。\n因此我自己建立了一個管理頁面，\n並且要登入指定的帳戶才能進入，\n方便我自己修改及新增資料。\n影片介紹 ","date":"2019-06-02T00:00:00Z","image":"https://27153216.github.io/p/%E9%9B%BB%E5%AD%90%E5%95%86%E5%8B%99%E5%B9%B3%E5%8F%B0/home_hudc426b49b28eed20ad460c03c6285da5_1182539_120x120_fill_box_smart1_3.png","permalink":"https://27153216.github.io/p/%E9%9B%BB%E5%AD%90%E5%95%86%E5%8B%99%E5%B9%B3%E5%8F%B0/","title":"電子商務平台"},{"content":"https://github.com/27153216/PetIII\n作品介紹 這是我在行動裝置程式設計的課程中做的課堂作品，\n使用 Android Studio 開發。\n一款進入關卡，等待攻略時間到，\n就可以領取獎勵的放置型手機遊戲。\n遊戲使用 NFC 靠卡感應功能實現多個不同玩家的帳號，\n並透過 SQLite 儲存玩家資料。\n這是一個 3 人小組開發的作品，\n程式大部分由我開發，\n組員負責劇情及美術設計。\n功能介紹 進入遊戲時，會要求玩家開啟 NFC 感應功能。\n玩家將任一感應式卡片（如悠遊卡）靠近手機後，\n就可以登入現有帳號或創建新的帳號。\n第一次進入遊戲時，會有前置劇情。\n玩家有兩名角色，可以透過通過關卡的金錢進行升級。\n等級會影響關卡的通過率。\n玩家可以透過下拉式選擇要挑戰的關卡，\n通關的機率由關卡難度和玩家角色等級決定。\n玩家的角色等級與關卡建議等級差距越大，\n通關的機率就越低。\n開始挑戰後，畫面顯示攻略所需的剩餘時間和關卡名稱。\n此時玩家即使關閉遊戲，挑戰仍會持續進行，\n再次靠卡登入就能看到剩餘的時間，或領取挑戰完成的獎勵。\n本遊戲可以實現多張卡片 / 多個帳號同時挑戰關卡而不會互相衝突。\n影片介紹 ","date":"2019-06-01T00:00:00Z","image":"https://27153216.github.io/p/petiii/home_hu8f2fe866fa854ced2d59fd39edb41ff7_158210_120x120_fill_box_smart1_3.png","permalink":"https://27153216.github.io/p/petiii/","title":"PetIII"},{"content":"https://github.com/27153216/PetII\n作品介紹 這是我在資料庫應用程式設計的課程中做的課堂作品，\n一款用 Windows Form 開發的寵物小遊戲。\n語言使用 C# ，結合 SQL Server 儲存玩家資料。\n這個作品為 3 人小組開發，\n我的負責部分為程式撰寫、優化，\n後半段寵物互動環節的所有內容。\n功能介紹 開啟程式後，\n可以在畫面中開啟新遊戲或讀取舊有紀錄，\n旁邊可以調整音量。\n最多可以有三個存檔紀錄。\n開始新遊戲後，\n會進入一段前置劇情，並幫寵物取名。\n前置劇情結束後，進入寵物互動環節。\n（由此開始是我開發）\n畫面中會有一隻貓咪四處走動，\n玩家可以點擊右方按鈕與她進行各種互動。\n畫面上方可以看到操作的紀錄和親密度。\n此處我們點擊右上方的飼料，\n會看見飼料隨著滑鼠移動。\n放置於地板後，貓咪會衝向飼料，並增加親密度。\n若放置於無法取得的地方，貓咪會提醒玩家。\n玩家也可以碰觸貓咪，增加親密度，\n左上方可以看見玩家操作紀錄。\n玩家若離開程式，\n下次開啟時也可以讀取上次遊玩的進度。\n影片介紹 ","date":"2018-12-01T00:00:00Z","image":"https://27153216.github.io/p/petii/home_hu4fcf7a56b01de4a678710852a20aefcd_261821_120x120_fill_box_smart1_3.png","permalink":"https://27153216.github.io/p/petii/","title":"PetII"},{"content":"https://github.com/27153216/Pet\n作品介紹 這是我在資料庫原理與應用的課程中做的課堂作品，\n一款網頁養寵物小遊戲。\n網頁部分使用 PHP 實現，\n結合 MySQL 儲存玩家資料。\n功能介紹 玩家第一次進入遊戲時，\n會請玩家輸入寵物的名字。\n輸入名字後，\n進入到遊戲主畫面。\n主畫面中可以看見一隻貓咪左右走動，\n滑鼠碰觸到她時會停下腳步，看向玩家。\n玩家可以採取各種操作，\n並根據操作的內容增減親密度。\n玩家做的所有操作以及親密度變化，\n會顯示在下方的操作紀錄中。\n影片介紹 拍攝影片時可能因版本問題導致資料庫寫入速度緩慢，\n原本情況下約 0.5 秒就有反應。\n","date":"2017-12-01T00:00:00Z","image":"https://27153216.github.io/p/pet/name_hu53d7e1f4f2bf89694163799fd689fab0_71449_120x120_fill_box_smart1_3.png","permalink":"https://27153216.github.io/p/pet/","title":"Pet"},{"content":"https://github.com/27153216/High-School-Project\n專題介紹 「享受，想瘦」是我的高中專題，\n透過 App Inventor 2 開發的減肥手機應用程式。\n「享受，想瘦」可以根據使用者的體重，\n計算使用者做各種運動消耗的熱量，\n並記錄每日消耗熱量製成折線圖，\n以及在各項運動中消耗熱量佔比的圓餅圖。\n程式開發方面由我負責，\n並在最後的專題競賽中榮獲優選。\n功能介紹 在第一次進入應用程式時，\n會請使用者輸入他的體重。\n使用者輸入體重之後，\n這筆資料便會記錄於資料庫中，\n下次啟動就不用再次輸入。\n進入應用程式主頁面後，\n從上方的下拉式選單可以選擇運動的種類。\n如果選單中沒有提供使用者目前的運動，\n則可以自訂運動名稱和消耗的熱量。\n按下開始運動後，碼錶開始計時。\n應用程式會開始根據使用者的體重與運動的種類，計算消耗的熱量。\n此時無論是關閉螢幕，將應用程式收至後台，\n都可以正常的計算時間與消耗熱量。\n使用者做的運動類型、消耗熱量都會記錄在資料庫中。\n從統計圖表中可以查看使用者的每日熱量消耗折線圖，\n以及各項運動的熱量消耗占比圓餅圖。\n（當時截圖沒截好，有點切到了）\n專題發表 最終榮獲優選（只有優選獎項）\n","date":"2015-06-11T00:00:00Z","image":"https://27153216.github.io/p/%E4%BA%AB%E5%8F%97%E6%83%B3%E7%98%A6/%E5%B0%81%E9%9D%A2%E5%9C%96_hubc1c3d7d8474b715d41bfea387af1839_27349_120x120_fill_box_smart1_3.png","permalink":"https://27153216.github.io/p/%E4%BA%AB%E5%8F%97%E6%83%B3%E7%98%A6/","title":"享受，想瘦。"}]